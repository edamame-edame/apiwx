"""Type stubs for apiwx.debug module.

This module provides type information for the debug logging system designed
specifically for the apiwx framework, enabling proper type checking and IDE support.
"""

import threading
from datetime import datetime
from enum import IntEnum
from typing import Any, Optional

class LogLevel(IntEnum):
    """Log levels in ascending order of severity."""
    
    DEBUG: int
    INFO: int
    WARNING: int
    ERROR: int
    CRITICAL: int
    
    @classmethod
    def from_string(cls, level_str: str) -> 'LogLevel': ...
    
    def to_string(self) -> str: ...

class Logger(threading.Thread):
    """Thread-based logger with file output and rotation capabilities.
    
    This class provides asynchronous logging with configurable log levels,
    file rotation, and both console and file output options.
    """
    
    def __init__(
        self,
        max_log_count: int = ...,
        max_log_size: int = ...,
        log_file_path: str = ...,
        log_level: LogLevel = ...,
        log_to_console: bool = ...,
        daemon: bool = ...
    ) -> None: ...
    
    def _logger(self) -> None: ...
    def _logprint(self, message: str) -> None: ...
    def _logsave(self, message: str) -> None: ...
    
    def log(self, tag: str, message: str, level: LogLevel = ...) -> None: ...
    def debug(self, tag: str, message: str) -> None: ...
    def info(self, tag: str, message: str) -> None: ...
    def warning(self, tag: str, message: str) -> None: ...
    def error(self, tag: str, message: str) -> None: ...
    def critical(self, tag: str, message: str) -> None: ...
    
    def set_level(self, level: LogLevel) -> None: ...
    def get_level(self) -> LogLevel: ...
    
    def _get_time_stamp(self) -> str: ...

def create_logger_from_sysargs(
    ui_debug: bool = ...,
    internal_log: bool = ...,
    log_level: str = ...,
    log_count: str = ...,
    log_file_size: str = ...,
    ui_debug_dir: str = ...,
    internal_debug_dir: str = ...
) -> tuple[Optional[Logger], Optional[Logger]]: ...

def remain_logger_output(logger: Optional[Logger]) -> None: ...

# UI Debug Logger Functions
def uilog(tag: str, message: str, level: LogLevel = ...) -> None: ...
def uidebug_log(tag: str, message: str) -> None: ...
def uiinfo_log(tag: str, message: str) -> None: ...
def uiwarning_log(tag: str, message: str) -> None: ...
def uierror_log(tag: str, message: str) -> None: ...
def uicritical_log(tag: str, message: str) -> None: ...
def uidebug_set_level(level: LogLevel) -> None: ...
def uidebug_get_level() -> LogLevel: ...
def uilog_output_remaining() -> None: ...

# Internal Logger Functions
def internallog(tag: str, message: str, level: LogLevel = ...) -> None: ...
def internaldebug_log(tag: str, message: str) -> None: ...
def internalinfo_log(tag: str, message: str) -> None: ...
def internalwarning_log(tag: str, message: str) -> None: ...
def internalerror_log(tag: str, message: str) -> None: ...
def internalcritical_log(tag: str, message: str) -> None: ...
def internal_set_level(level: LogLevel) -> None: ...
def internal_get_level() -> LogLevel: ...
def internallog_output_remaining() -> None: ...

# Global logger instances
ui_debug_logger: Optional[Logger]
internal_logger: Optional[Logger]